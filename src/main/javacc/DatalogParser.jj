PARSER_BEGIN(DatalogParser)

package c6591;

import c6591.ASTClasses.*;
import java.util.ArrayList;

public class DatalogParser {

    // additional fields and methods can be added here

    // This method replaces the nested for loop from the Rule production
    void setVariableSource(Head head, Body body) {
        for (Variable variable : head.predicate.variables) {
            for (Predicate predicate : body.predicates) {
                boolean variableMatched = false;
                for (Variable v : predicate.variables) {
                    if (v.name.equals(variable.name)) {
                        variableMatched = true;
                        break;
                    }
                }
                if (variableMatched) {
                    variable.source = predicate.alias;
                    break;
                }
            }
        }
    }
}

PARSER_END(DatalogParser)

// Tokens
TOKEN :
{
    <PRED_NAME: ["a"-"z"](["a"-"z","A"-"Z","0"-"9"])*> |
    <VAR_NAME: ["A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*> |
    <CONST_NAME: ["a"-"z"](["a"-"z","A"-"Z","0"-"9"])*>
}

Program Program() :
{
    List<Rule> rules = new ArrayList<>();
    List<Fact> facts = new ArrayList<>();
    Statement statement;
}
{
    ( statement = Statement()
        {
            if (statement instanceof Rule) rules.add((Rule) statement);
            else if (statement instanceof Fact) facts.add((Fact) statement);
        }
    )*
    { return new Program(rules, facts); }
}

Statement Statement() :
{
    Rule rule;
    Fact fact;
}
{
    rule = Rule() { return rule; }
    |
    fact = Fact() { return fact; }
}

Rule Rule() :
{
    Head head;
    Body body;
    Rule rule = new Rule();
}
{
    head = Head() ":" body = Body(rule)
    {
        rule.head = head;
        rule.body = body;
        setVariableSource(head, body); // Call the method here
    }
    { return rule; }
}

Fact Fact() :
{
    Predicate predicate;
}
{
    predicate = Predicate(null) // No rule for a fact
    { return new Fact(predicate); }
}

Head Head() :
{
    Predicate predicate;
}
{
    predicate = Predicate(null) // No rule for a head
    { return new Head(predicate); }
}

Body Body(Rule rule) :
{
    List<Predicate> predicates = new ArrayList<>();
    Predicate predicate;
}
{
    (
        predicate = Predicate(rule)
        { predicates.add(predicate); }
    )*
    { return new Body(predicates); }
}

Predicate Predicate(Rule rule) :
{
    String name;
    List<Term> terms = new ArrayList<>();
    Term term;
    String alias = null;
}
{
    name = <PRED_NAME>
    {
        int count = rule != null ? rule.bodyPredicateCounts.getOrDefault(name, 0) + 1 : 1;
        if (rule != null) rule.bodyPredicateCounts.put(name, count);
        alias = name + count;
    }
    "(" 
        term = Term() { term.source = alias; term.index = terms.size(); terms.add(term); }
    (
        "," term = Term() { term.source = alias; term.index = terms.size(); terms.add(term); }
    )*
    ")"
    { return new Predicate(name, terms, alias); }
}

Term Term() :
{
    Variable variable;
    Constant constant;
}
{
    variable = Variable() { return variable; }
    |
    constant = Constant() { return constant; }
}

Variable Variable() :
{
    String name;
}
{
    name = <VAR_NAME>
    { return new Variable(name, null, 0); } // Source and index to be set later
}

Constant Constant() :
{
    String value;
}
{
    value = <CONST_NAME>
    { return new Constant(value); }
}


